/**
 * PKL-278651-BOUNCE-0023-CICD - CI/CD Integration Module
 * 
 * This module provides CI/CD integration for the Bounce testing system,
 * including summarized reports and proper exit codes.
 * 
 * @framework Framework5.2
 * @version 1.0.0
 * @lastModified 2025-04-22
 */

import fs from 'fs/promises';
import path from 'path';
import { BounceFindingSeverity } from './types';
import { getTestRun, getFindings } from './storage';

/**
 * Generate a CI/CD summary report for a test run
 * @param testRunId The ID of the test run
 * @returns Path to the generated report
 */
export async function generateCICDSummary(testRunId: number): Promise<string> {
  const testRun = await getTestRun(testRunId);
  if (!testRun) {
    throw new Error(`Test run ${testRunId} not found`);
  }

  const findings = await getFindings(testRunId);
  
  // Count issues by severity
  const severityCounts = {
    CRITICAL: 0,
    HIGH: 0,
    MODERATE: 0,
    LOW: 0,
  };
  
  findings.forEach(finding => {
    severityCounts[finding.severity]++;
  });
  
  // Determine if the build should fail based on severity
  const shouldFail = severityCounts.CRITICAL > 0;
  
  // Format timestamp for filename
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  
  // Create the report content
  let content = `# Bounce CI/CD Summary - Test Run #${testRunId}\n\n`;
  content += `Generated on: ${new Date().toLocaleString()}\n\n`;
  
  content += `## Test Run Information\n\n`;
  content += `- **Name**: ${testRun.name}\n`;
  content += `- **Status**: ${testRun.status}\n`;
  content += `- **Target URL**: ${testRun.base_url}\n`;
  content += `- **Total Findings**: ${findings.length}\n\n`;
  
  content += `## Summary\n\n`;
  content += `- **Critical Issues**: ${severityCounts.CRITICAL}\n`;
  content += `- **High Priority Issues**: ${severityCounts.HIGH}\n`;
  content += `- **Moderate Issues**: ${severityCounts.MODERATE}\n`;
  content += `- **Low Priority Issues**: ${severityCounts.LOW}\n\n`;
  
  content += `## Build Status\n\n`;
  content += shouldFail 
    ? `⛔ **FAIL** - Critical issues must be resolved before deployment\n\n`
    : `✅ **PASS** - No critical issues found\n\n`;
  
  if (severityCounts.CRITICAL > 0) {
    content += `### Critical Issues That Must Be Fixed\n\n`;
    const criticalFindings = findings.filter(f => f.severity === 'CRITICAL');
    
    criticalFindings.forEach(finding => {
      const frameworkId = finding.framework_id || `PKL-278651-${finding.area.toUpperCase()}-${String(finding.id).padStart(4, '0')}-FIX`;
      content += `- **${finding.title}** (\`${frameworkId}\`)\n`;
      content += `  ${finding.description}\n`;
      content += `  Affected URL: ${finding.affected_url}\n\n`;
    });
  }
  
  if (severityCounts.HIGH > 0) {
    content += `### High Priority Issues\n\n`;
    content += `${severityCounts.HIGH} high priority issues were found. See the detailed report for more information.\n\n`;
  }
  
  content += `---\n\n`;
  content += `Generated by Bounce Automated Testing System | Framework5.2\n`;
  
  // Ensure the reports directory exists
  const reportsDir = path.join(process.cwd(), 'reports');
  await fs.mkdir(reportsDir, { recursive: true });
  
  // Write the report to a file
  const filePath = path.join(reportsDir, `cicd-summary-${testRunId}-${timestamp}.md`);
  await fs.writeFile(filePath, content);
  
  return filePath;
}

/**
 * Run CI/CD integration tests and return appropriate exit code
 * @param baseUrl The base URL to test
 * @returns Exit code (0 for success, 1 for failure)
 */
export async function runCICDTests(baseUrl: string): Promise<number> {
  try {
    console.log('==========================================================');
    console.log('Bounce CI/CD Integration Tests');
    console.log('==========================================================');
    console.log(`Starting tests against: ${baseUrl}`);
    
    // Import dynamically to avoid circular dependencies
    const { startTestRun } = await import('./production-run');
    
    // Run the tests
    const testRunId = await startTestRun({
      baseUrl,
      browser: 'chrome',
      mobile: false,
      coverage: 50,
      headless: true,
      timeout: 30000,
    });
    
    console.log(`\nTest run completed with ID: ${testRunId}`);
    
    // Generate the CI/CD summary
    const summaryPath = await generateCICDSummary(testRunId);
    console.log(`CI/CD summary generated: ${summaryPath}`);
    
    // Get findings to determine exit code
    const findings = await getFindings(testRunId);
    const hasCritical = findings.some(f => f.severity === 'CRITICAL');
    
    console.log('\n==========================================================');
    
    if (hasCritical) {
      console.log('❌ TEST FAILURE: Critical issues found');
      console.log('The build should not be deployed until these issues are fixed.');
      console.log('==========================================================');
      return 1;
    } else {
      console.log('✅ TEST SUCCESS: No critical issues found');
      console.log('The build can be safely deployed.');
      console.log('==========================================================');
      return 0;
    }
  } catch (error) {
    console.error(`Error running CI/CD tests: ${error.message}`);
    return 1;
  }
}

// Run the function if this script is called directly
if (import.meta.url === process.argv[1]) {
  // Default to production URL if not specified
  const baseUrl = process.argv[2] || 'https://pickle-plus.replit.app';
  
  runCICDTests(baseUrl)
    .then((exitCode) => process.exit(exitCode))
    .catch((error) => {
      console.error(`Error running CI/CD tests: ${error.message}`);
      process.exit(1);
    });
}