/**
 * PKL-278651-BOUNCE-0014-CICD - Bug Report Generator
 * 
 * Generates bug reports from test run findings
 * 
 * @framework Framework5.2
 * @version 1.0.0
 * @lastModified 2025-04-22
 */

import { db } from '../../server/db';
import { eq } from 'drizzle-orm';
import { bounceTestRuns, bounceFindings, BounceFindingSeverity } from '../../shared/schema/bounce';
import fs from 'fs';
import path from 'path';

/**
 * Bug report generator for the bounce testing system
 */
export class BugReportGenerator {
  /**
   * Generate a bug report for a test run
   * @param testRunId The test run ID to generate a report for
   * @returns Path to the generated report file
   */
  async generateReport(testRunId: number): Promise<string> {
    console.log(`[Bounce] Generating bug report for test run ${testRunId}...`);
    
    // Get the test run
    const [testRun] = await db
      .select()
      .from(bounceTestRuns)
      .where(eq(bounceTestRuns.id, testRunId));
    
    if (!testRun) {
      throw new Error(`Test run ${testRunId} not found`);
    }
    
    // Get all findings for this test run
    const findings = await db
      .select()
      .from(bounceFindings)
      .where(eq(bounceFindings.test_run_id, testRunId));
    
    // Generate the report in markdown format
    const dateStr = new Date().toLocaleString();
    let markdown = `# Bounce Bug Report - Test Run #${testRunId}\n\n`;
    markdown += `Generated on: ${dateStr}\n\n`;
    
    // Add test run information
    markdown += `## Test Run Information\n\n`;
    markdown += `- **Name**: ${testRun.name}\n`;
    markdown += `- **Started**: ${testRun.started_at ? new Date(testRun.started_at).toLocaleString() : 'N/A'}\n`;
    markdown += `- **Completed**: ${testRun.completed_at ? new Date(testRun.completed_at).toLocaleString() : 'N/A'}\n`;
    markdown += `- **Status**: ${testRun.status}\n`;
    markdown += `- **Target URL**: ${testRun.target_url || 'N/A'}\n`;
    markdown += `- **Total Findings**: ${findings.length}\n\n`;
    
    // Group findings by severity
    const criticalFindings = findings.filter(f => f.severity === BounceFindingSeverity.CRITICAL);
    const highFindings = findings.filter(f => f.severity === BounceFindingSeverity.HIGH);
    const moderateFindings = findings.filter(f => 
      f.severity === BounceFindingSeverity.MODERATE ||
      f.severity === BounceFindingSeverity.MEDIUM
    );
    const lowFindings = findings.filter(f => 
      f.severity === BounceFindingSeverity.LOW ||
      f.severity === BounceFindingSeverity.INFO
    );
    
    // Add summary
    markdown += `## Summary\n\n`;
    markdown += `- **Critical Issues**: ${criticalFindings.length}\n`;
    markdown += `- **High Priority Issues**: ${highFindings.length}\n`;
    markdown += `- **Moderate Issues**: ${moderateFindings.length}\n`;
    markdown += `- **Low Priority Issues**: ${lowFindings.length}\n\n`;
    
    // Add findings
    if (findings.length > 0) {
      markdown += `## Findings\n\n`;
      
      // Critical findings
      if (criticalFindings.length > 0) {
        markdown += `### Critical Issues\n\n`;
        
        for (const finding of criticalFindings) {
          markdown += this.generateFindingMarkdown(finding);
        }
      }
      
      // High priority findings
      if (highFindings.length > 0) {
        markdown += `### High Priority Issues\n\n`;
        
        for (const finding of highFindings) {
          markdown += this.generateFindingMarkdown(finding);
        }
      }
      
      // Moderate findings
      if (moderateFindings.length > 0) {
        markdown += `### Moderate Issues\n\n`;
        
        for (const finding of moderateFindings) {
          markdown += this.generateFindingMarkdown(finding);
        }
      }
      
      // Low priority findings
      if (lowFindings.length > 0) {
        markdown += `### Low Priority Issues\n\n`;
        
        for (const finding of lowFindings) {
          markdown += this.generateFindingMarkdown(finding);
        }
      }
    } else {
      markdown += `## Findings\n\n`;
      markdown += `No findings were recorded during this test run.\n\n`;
    }
    
    // Add footer
    markdown += `\n---\n\n`;
    markdown += `Generated by Bounce Automated Testing System | Framework5.2\n`;
    
    // Create reports directory if it doesn't exist
    const reportsDir = path.join(process.cwd(), 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    // Write report to file
    const fileName = `bug-report-${testRunId}-${new Date().toISOString().replace(/:/g, '-')}.md`;
    const filePath = path.join(reportsDir, fileName);
    
    fs.writeFileSync(filePath, markdown);
    
    console.log(`[Bounce] Bug report generated and saved to ${filePath}`);
    
    return filePath;
  }
  
  /**
   * Generate markdown for a single finding
   * @param finding The finding to generate markdown for
   * @returns Markdown string for the finding
   */
  private generateFindingMarkdown(finding: any): string {
    let markdown = `#### Finding #${finding.id}: ${finding.title}\n\n`;
    
    // Generate Framework5.2 ticket ID suggestion
    const areaCode = finding.area ? finding.area.toUpperCase().replace(/\s+/g, '-') : 'GENERAL';
    const fixId = `PKL-278651-${areaCode}-${String(finding.id).padStart(4, '0')}-FIX`;
    
    markdown += `**Framework5.2 ID**: \`${fixId}\`\n\n`;
    markdown += `**Severity**: ${finding.severity}\n\n`;
    markdown += `**Area**: ${finding.area || 'N/A'}\n\n`;
    markdown += `**Description**:\n${finding.description}\n\n`;
    
    if (finding.reproducible_steps) {
      markdown += `**Steps to Reproduce**:\n${finding.reproducible_steps}\n\n`;
    }
    
    if (finding.affected_url) {
      markdown += `**Affected URL**: ${finding.affected_url}\n\n`;
    }
    
    if (finding.device_info) {
      try {
        const deviceInfo = JSON.parse(finding.device_info);
        markdown += `**Device Info**:\n`;
        
        for (const [key, value] of Object.entries(deviceInfo)) {
          markdown += `- ${key}: ${value}\n`;
        }
        
        markdown += '\n';
      } catch (error) {
        markdown += `**Device Info**: ${finding.device_info}\n\n`;
      }
    }
    
    markdown += `---\n\n`;
    
    return markdown;
  }
}

// Export singleton instance
export const bugReportGenerator = new BugReportGenerator();