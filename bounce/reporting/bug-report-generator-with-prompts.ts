/**
 * PKL-278651-BOUNCE-0021-REPORTS - Bug Report Generator With Fix Prompts
 * 
 * Enhanced bug report generator that includes actionable fix prompts
 * 
 * @framework Framework5.2
 * @version 1.0.0
 * @lastModified 2025-04-22
 */

import fs from 'fs';
import path from 'path';
import { db } from '../../server/db';
import { eq } from 'drizzle-orm';
import { 
  bounceTestRuns, 
  bounceFindings,
  BounceFindingSeverity 
} from '../../shared/schema/bounce';
import { generateFixPrompt } from './fix-prompts';

/**
 * Generate a bug report for a test run with fix prompts
 * @param testRunId The ID of the test run
 * @returns The path to the generated report
 */
export async function generateReportWithPrompts(testRunId: number): Promise<string> {
  // Get the test run
  const [testRun] = await db
    .select()
    .from(bounceTestRuns)
    .where(eq(bounceTestRuns.id, testRunId));
  
  if (!testRun) {
    throw new Error(`Test run ${testRunId} not found`);
  }
  
  // Get all findings for this test run
  const findings = await db
    .select()
    .from(bounceFindings)
    .where(eq(bounceFindings.test_run_id, testRunId));
  
  // Count findings by severity
  const criticalCount = findings.filter(f => f.severity === BounceFindingSeverity.CRITICAL).length;
  const highCount = findings.filter(f => f.severity === BounceFindingSeverity.HIGH).length;
  const moderateCount = findings.filter(f => 
    f.severity === BounceFindingSeverity.MODERATE || 
    f.severity === BounceFindingSeverity.MEDIUM
  ).length;
  const lowCount = findings.filter(f => 
    f.severity === BounceFindingSeverity.LOW || 
    f.severity === BounceFindingSeverity.INFO
  ).length;
  
  // Generate the report content
  let report = `# Bounce Bug Report With Fix Prompts - Test Run #${testRun.id}\n\n`;
  report += `Generated on: ${new Date().toLocaleString()}\n\n`;
  
  // Add test run information
  report += `## Test Run Information\n\n`;
  report += `- **Name**: ${testRun.name}\n`;
  report += `- **Started**: ${testRun.created_at ? new Date(testRun.created_at).toLocaleString() : new Date().toLocaleString()}\n`;
  report += `- **Completed**: ${testRun.completed_at ? new Date(testRun.completed_at).toLocaleString() : 
    (testRun.created_at ? new Date(testRun.created_at).toLocaleString() : new Date().toLocaleString())}\n`;
  report += `- **Status**: ${testRun.status}\n`;
  report += `- **Target URL**: ${testRun.target_url || 'Unknown'}\n`;
  report += `- **Total Findings**: ${findings.length}\n\n`;
  
  // Add summary section
  report += `## Summary\n\n`;
  report += `- **Critical Issues**: ${criticalCount}\n`;
  report += `- **High Priority Issues**: ${highCount}\n`;
  report += `- **Moderate Issues**: ${moderateCount}\n`;
  report += `- **Low Priority Issues**: ${lowCount}\n\n`;
  
  // Add findings by severity
  report += `## Findings\n\n`;
  
  // Critical findings
  if (criticalCount > 0) {
    report += `### Critical Issues\n\n`;
    let index = 0;
    for (const finding of findings.filter(f => f.severity === BounceFindingSeverity.CRITICAL)) {
      index++;
      report += formatFindingWithPrompts(finding, index);
    }
  }
  
  // High findings
  if (highCount > 0) {
    report += `### High Priority Issues\n\n`;
    let index = 0;
    for (const finding of findings.filter(f => f.severity === BounceFindingSeverity.HIGH)) {
      index++;
      report += formatFindingWithPrompts(finding, index);
    }
  }
  
  // Moderate findings
  if (moderateCount > 0) {
    report += `### Moderate Issues\n\n`;
    let index = 0;
    for (const finding of findings.filter(f => 
      f.severity === BounceFindingSeverity.MODERATE || 
      f.severity === BounceFindingSeverity.MEDIUM
    )) {
      index++;
      report += formatFindingWithPrompts(finding, index);
    }
  }
  
  // Low findings
  if (lowCount > 0) {
    report += `### Low Priority Issues\n\n`;
    let index = 0;
    for (const finding of findings.filter(f => 
      f.severity === BounceFindingSeverity.LOW || 
      f.severity === BounceFindingSeverity.INFO
    )) {
      index++;
      report += formatFindingWithPrompts(finding, index);
    }
  }
  
  // Add footer
  report += `\n---\n\n`;
  report += `Generated by Bounce Automated Testing System | Framework5.2`;
  
  // Create reports directory if it doesn't exist
  const reportsDir = path.join(process.cwd(), 'reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  // Write report to file
  const fileName = `bug-report-with-prompts-${testRunId}-${new Date().toISOString().replace(/:/g, '-')}.md`;
  const filePath = path.join(reportsDir, fileName);
  
  fs.writeFileSync(filePath, report);
  
  return filePath;
}

/**
 * Format a finding with fix prompts for the report
 * @param finding The finding to format
 * @param index The index of the finding
 * @returns Formatted finding text with fix prompts
 */
function formatFindingWithPrompts(finding: any, index: number): string {
  // Generate fix prompts for this finding
  const fixPrompt = generateFixPrompt(finding);
  
  let text = `#### Finding #${finding.id}: ${finding.title}\n\n`;
  
  // Format Framework5.2 ID properly if missing
  const frameworkId = finding.framework_id || `PKL-278651-${finding.area.toUpperCase()}-${String(finding.id).padStart(4, '0')}-FIX`;
  text += `**Framework5.2 ID**: \`${frameworkId}\`\n\n`;
  
  text += `**Severity**: ${finding.severity}\n\n`;
  text += `**Area**: ${finding.area}\n\n`;
  text += `**Description**:\n${finding.description}\n\n`;
  
  if (finding.steps_to_reproduce) {
    text += `**Steps to Reproduce**:\n`;
    const steps = finding.steps_to_reproduce.split('\n');
    for (let i = 0; i < steps.length; i++) {
      text += `${i + 1}. ${steps[i]}\n`;
    }
    text += '\n';
  }
  
  if (finding.affected_url) {
    text += `**Affected URL**: ${finding.affected_url}\n\n`;
  }
  
  // Add fix prompt section
  text += `**Fix Recommendations**:\n\n`;
  
  // Action items
  text += `*Action Items:*\n`;
  for (const action of fixPrompt.actionItems) {
    text += `- ${action}\n`;
  }
  text += '\n';
  
  // Code examples
  text += `*Code Example:*\n`;
  text += '```tsx\n';
  text += fixPrompt.codeExamples;
  text += '\n```\n\n';
  
  // Testing steps
  text += `*Testing Steps:*\n`;
  for (const step of fixPrompt.testingSteps) {
    text += `- ${step}\n`;
  }
  text += '\n';
  
  text += `---\n\n`;
  
  return text;
}

// Directly run if this module is executed on its own
if (import.meta.url === process.argv[1]) {
  // Check if a test run ID was provided
  if (process.argv.length < 3) {
    console.error('Please provide a test run ID');
    process.exit(1);
  }
  
  const testRunId = parseInt(process.argv[2], 10);
  
  generateReportWithPrompts(testRunId)
    .then((filePath) => {
      console.log(`Report with fix prompts generated: ${filePath}`);
      process.exit(0);
    })
    .catch((error) => {
      console.error(`Error generating report: ${error.message}`);
      process.exit(1);
    });
}